// Mocks generated by Mockito 5.2.0 from annotations
// in betterhodl_flutter/test/screens/market_list_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i6;

import 'package:betterhodl_flutter/data/services/socket_service/socket_service.dart' as _i3;
import 'package:betterhodl_flutter/domain/models/market_coin.dart' as _i5;
import 'package:betterhodl_flutter/view_models/market_coins_view_model.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeSocketService_1 extends _i1.Fake implements _i3.SocketService {}

/// A class which mocks [MarketCoinsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarketCoinsViewModel extends _i1.Mock
    implements _i4.MarketCoinsViewModel {
  MockMarketCoinsViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i5.MarketCoin> get marketCoinMap => (super.noSuchMethod(
      Invocation.getter(#marketCoinMap),
      returnValue: <String, _i5.MarketCoin>{}) as Map<String, _i5.MarketCoin>);
  @override
  set marketCoinMap(Map<String, _i5.MarketCoin>? _marketCoinMap) =>
      super.noSuchMethod(Invocation.setter(#marketCoinMap, _marketCoinMap),
          returnValueForMissingStub: null);
  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i3.SocketService get socketService =>
      (super.noSuchMethod(Invocation.getter(#socketService),
          returnValue: _FakeSocketService_1()) as _i3.SocketService);
  @override
  _i4.SortOrders get sortOrder =>
      (super.noSuchMethod(Invocation.getter(#sortOrder),
          returnValue: _i4.SortOrders.marketCapDesc) as _i4.SortOrders);
  @override
  set sortOrder(_i4.SortOrders? _sortOrder) =>
      super.noSuchMethod(Invocation.setter(#sortOrder, _sortOrder),
          returnValueForMissingStub: null);
  @override
  bool get loading =>
      (super.noSuchMethod(Invocation.getter(#loading), returnValue: false)
          as bool);
  @override
  List<_i5.MarketCoin> get marketCoins =>
      (super.noSuchMethod(Invocation.getter(#marketCoins),
          returnValue: <_i5.MarketCoin>[]) as List<_i5.MarketCoin>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic setLoading(bool? loading) =>
      super.noSuchMethod(Invocation.method(#setLoading, [loading]));
  @override
  dynamic updateMarketCoin(Map<String, dynamic>? priceData) =>
      super.noSuchMethod(Invocation.method(#updateMarketCoin, [priceData]));
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
