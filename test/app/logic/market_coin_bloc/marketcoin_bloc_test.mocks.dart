// Mocks generated by Mockito 5.3.2 from annotations
// in betterhodl_flutter/test/app/logic/market_coin_bloc/marketcoin_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:betterhodl_flutter/data/adapters/rest_adapter.dart' as _i2;
import 'package:betterhodl_flutter/data/services/socket_service/socket_service.dart'
    as _i3;
import 'package:betterhodl_flutter/domain/models/market_coin.dart' as _i4;
import 'package:betterhodl_flutter/domain/repositories/marketcoin_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestAdapter_0 extends _i1.SmartFake implements _i2.RestAdapter {
  _FakeRestAdapter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocketService_1 extends _i1.SmartFake implements _i3.SocketService {
  _FakeSocketService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMarketCoin_3 extends _i1.SmartFake implements _i4.MarketCoin {
  _FakeMarketCoin_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MarketCoinRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarketCoinRepository extends _i1.Mock
    implements _i5.MarketCoinRepository {
  MockMarketCoinRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i4.MarketCoin> get marketCoinMap => (super.noSuchMethod(
        Invocation.getter(#marketCoinMap),
        returnValue: <String, _i4.MarketCoin>{},
      ) as Map<String, _i4.MarketCoin>);
  @override
  set marketCoinMap(Map<String, _i4.MarketCoin>? _marketCoinMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #marketCoinMap,
          _marketCoinMap,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.RestAdapter get restAdapter => (super.noSuchMethod(
        Invocation.getter(#restAdapter),
        returnValue: _FakeRestAdapter_0(
          this,
          Invocation.getter(#restAdapter),
        ),
      ) as _i2.RestAdapter);
  @override
  _i3.SocketService get socketService => (super.noSuchMethod(
        Invocation.getter(#socketService),
        returnValue: _FakeSocketService_1(
          this,
          Invocation.getter(#socketService),
        ),
      ) as _i3.SocketService);
  @override
  _i6.Future<List<_i4.MarketCoin>> fethAllMarketCoin(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #fethAllMarketCoin,
          [url],
        ),
        returnValue: _i6.Future<List<_i4.MarketCoin>>.value(<_i4.MarketCoin>[]),
      ) as _i6.Future<List<_i4.MarketCoin>>);
  @override
  _i6.Stream<List<_i4.MarketCoin>> dataBaseStream(dynamic url) =>
      (super.noSuchMethod(
        Invocation.method(
          #dataBaseStream,
          [url],
        ),
        returnValue: _i6.Stream<List<_i4.MarketCoin>>.empty(),
      ) as _i6.Stream<List<_i4.MarketCoin>>);
  @override
  _i6.Future<void> stopStream() => (super.noSuchMethod(
        Invocation.method(
          #stopStream,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  List<_i4.MarketCoin> reverseOrder() => (super.noSuchMethod(
        Invocation.method(
          #reverseOrder,
          [],
        ),
        returnValue: <_i4.MarketCoin>[],
      ) as List<_i4.MarketCoin>);
}

/// A class which mocks [MarketCoin].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarketCoin extends _i1.Mock implements _i4.MarketCoin {
  MockMarketCoin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get symbol => (super.noSuchMethod(
        Invocation.getter(#symbol),
        returnValue: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  String get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: '',
      ) as String);
  @override
  double get currentPrice => (super.noSuchMethod(
        Invocation.getter(#currentPrice),
        returnValue: 0.0,
      ) as double);
  @override
  set currentPrice(double? _currentPrice) => super.noSuchMethod(
        Invocation.setter(
          #currentPrice,
          _currentPrice,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get marketCap => (super.noSuchMethod(
        Invocation.getter(#marketCap),
        returnValue: 0.0,
      ) as double);
  @override
  int get marketCapRank => (super.noSuchMethod(
        Invocation.getter(#marketCapRank),
        returnValue: 0,
      ) as int);
  @override
  double get high24h => (super.noSuchMethod(
        Invocation.getter(#high24h),
        returnValue: 0.0,
      ) as double);
  @override
  double get low24h => (super.noSuchMethod(
        Invocation.getter(#low24h),
        returnValue: 0.0,
      ) as double);
  @override
  double get priceChange24h => (super.noSuchMethod(
        Invocation.getter(#priceChange24h),
        returnValue: 0.0,
      ) as double);
  @override
  double get priceChangePercentage24h => (super.noSuchMethod(
        Invocation.getter(#priceChangePercentage24h),
        returnValue: 0.0,
      ) as double);
  @override
  double get ath => (super.noSuchMethod(
        Invocation.getter(#ath),
        returnValue: 0.0,
      ) as double);
  @override
  double get athChangePercentage => (super.noSuchMethod(
        Invocation.getter(#athChangePercentage),
        returnValue: 0.0,
      ) as double);
  @override
  DateTime get athDate => (super.noSuchMethod(
        Invocation.getter(#athDate),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#athDate),
        ),
      ) as DateTime);
  @override
  double get atl => (super.noSuchMethod(
        Invocation.getter(#atl),
        returnValue: 0.0,
      ) as double);
  @override
  double get atlChangePercentage => (super.noSuchMethod(
        Invocation.getter(#atlChangePercentage),
        returnValue: 0.0,
      ) as double);
  @override
  DateTime get atlDate => (super.noSuchMethod(
        Invocation.getter(#atlDate),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#atlDate),
        ),
      ) as DateTime);
  @override
  _i4.MarketCoin copyFrom({required double? newCurrentPrice}) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyFrom,
          [],
          {#newCurrentPrice: newCurrentPrice},
        ),
        returnValue: _FakeMarketCoin_3(
          this,
          Invocation.method(
            #copyFrom,
            [],
            {#newCurrentPrice: newCurrentPrice},
          ),
        ),
      ) as _i4.MarketCoin);
}
